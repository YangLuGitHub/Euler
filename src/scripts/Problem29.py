# Distinct powers
# Problem 29
# Consider all integer combinations of ab for 2 <= a <= 5 and 2 <= b <= 5:
#
# 2^2=4, 2^3=8, 2^4=16, 2^5=32
# 3^2=9, 3^3=27, 3^4=81, 3^5=243
# 4^2=16, 4^3=64, 4^4=256, 4^5=1024
# 5^2=25, 5^3=125, 5^4=625, 5^5=3125
#
# If they are then placed in numerical order, with any repeats removed,
# we get the following sequence of 15 distinct terms:
#
# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
#
# How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?
#
# A naive solution is simple, although it is not actually necessary to compute the terms.
# Simply note that integers which are powers need to have duplicates removed.
MAX_VALUE = 100


def run():
    used_indices = set()

    element_count = 0

    two_to_max = list(range(2, MAX_VALUE + 1))

    for i in range(2, MAX_VALUE + 1):
        if i not in used_indices:
            if i * i <= MAX_VALUE:
                power = 2
                indices = set(two_to_max)

                base = i * i

                while base <= MAX_VALUE:
                    # print("Pre-computing base {0}".format(base))
                    used_indices.add(base)
                    for value in two_to_max:
                        indices.add(power * value)
                    power += 1
                    base *= i

                # print("Pre-computed entries from {0}^1 to {0}^{1} for a total of {2} entries"
                #       .format(i, power - 1, len(indices)))
                element_count += len(indices)
            else:
                element_count += MAX_VALUE - 1

    print("The total number of distinct terms in the generated sequence is {0}".format(element_count))

# Sample Output:
# The total number of distinct terms in the generated sequence is 9183
#
# Total running time for Problem29.py is 0.00028641963993298176 seconds
